
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float3 normal: TEXCOORD0;
	float3 vxyz: TEXCOORD1;
	float3 color : COLOR;
};

struct PixelDataOutput {
	float3 color : COLOR;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj, uniform float sphereRadius,
  uniform float3 sphereCenter, uniform float morphFraction) {

  VertexDataOutput ret;
  float3 morphDirection = normalize(vdi.vertex.xyz-sphereCenter);
  float3 finalPosition = sphereCenter + morphDirection*sphereRadius;
  float4 morphedVertex;
  morphedVertex.xyz = vdi.vertex.xyz + (finalPosition-vdi.vertex.xyz)*morphFraction;
  morphedVertex.w = 1.0f;
  ret.projv = mul(modelViewProj, morphedVertex);
  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}


PixelDataOutput FragmentMain(VertexDataOutput pdi, 
	uniform float3 eye, uniform float3 light,
	uniform float3 tlc, uniform float3 trc, uniform float3 blc, uniform sampler2D billboardTexture, uniform samplerCUBE environmentMap) {



  PixelDataOutput ret;


  float3 materialColor = pdi.color;
  float ka = 0.4f;
  float3 ev = normalize(eye - pdi.vxyz);
  float3 normal = normalize(pdi.normal);
  float3 lightv = normalize(light-pdi.vxyz);
  float kd = dot(normal, lightv);
  kd = (kd < 0.0f) ? 0.0f : kd;
	float3 litColor = materialColor*(ka + (1-ka)*kd);
	ret.color.rgb = litColor;
	float3 evn = normal * ev * normal;

   float3 reflectedRay = normalize(evn * 2.0f - ev);

   float3 bbNormal = normalize(cross(blc - tlc, trc - tlc));
   float t =  dot((tlc - pdi.vxyz), bbNormal);
   t = t / dot(reflectedRay, bbNormal);
   if (t > 0 && t < 100){
   // if intersection, compute billboard texture coordinates
   float bbWidthNum = pdi.vxyz.x - tlc.x;
   float bbWidthDenom = trc.x - tlc.x;
   float s = bbWidthNum/bbWidthDenom;

   float bbHeightNum = pdi.vxyz.y - tlc.y;
   float bbHeightDenom = blc.y - tlc.y;
   float t = bbHeightNum/bbHeightDenom;
   
   if (s > 0.001 && s < 0.99 && t > 0.01 && s < 0.99){
	float2 st = vec2(s, t);
	float4 tex = tex2D(billboardTexture,st);
	if (tex.a != 0){
		ret.color.rgb = tex.rgb;
	}
	else{
		ret.color = texCUBE(environmentMap, reflectedRay * -1);
	}
   }

   else{
		ret.color = texCUBE(environmentMap, reflectedRay * -1);
   }


   }
   else{
		ret.color = texCUBE(environmentMap, reflectedRay * -1);
   }
  
	 
 return ret;

}