// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gui.h"

void GUI::cb_FilledMode_i(Fl_Button*, void*) {
  FilledMode_cb();
}
void GUI::cb_FilledMode(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_FilledMode_i(o,v);
}

void GUI::cb_WireframeMode_i(Fl_Button*, void*) {
  WireframeMode_cb();
}
void GUI::cb_WireframeMode(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_WireframeMode_i(o,v);
}

void GUI::cb_ToggleReflectionShader_i(Fl_Button*, void*) {
  ToggleReflectionShader_cb();
}
void GUI::cb_ToggleReflectionShader(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_ToggleReflectionShader_i(o,v);
}

void GUI::cb_Debug_i(Fl_Button*, void*) {
  DBG_cb();
}
void GUI::cb_Debug(Fl_Button* o, void* v) {
  ((GUI*)(o->parent()->user_data()))->cb_Debug_i(o,v);
}
#include "scene.h"

GUI::GUI() {
  { uiw = new Fl_Double_Window(198, 197, "GUI");
    uiw->user_data((void*)(this));
    { // 	
      FilledMode = new Fl_Button(15, 75, 165, 25, "Filled Mode");
      FilledMode->callback((Fl_Callback*)cb_FilledMode);
    } // Fl_Button* FilledMode
    { // 	
      WireframeMode = new Fl_Button(15, 105, 165, 25, "Wire Frame Mode");
      WireframeMode->callback((Fl_Callback*)cb_WireframeMode);
    } // Fl_Button* WireframeMode
    { // 		
      ToggleReflectionShader = new Fl_Button(15, 135, 165, 25, "Toggle Reflection Shader");
      ToggleReflectionShader->callback((Fl_Callback*)cb_ToggleReflectionShader);
    } // Fl_Button* ToggleReflectionShader
    { // 	
      Debug = new Fl_Button(15, 45, 165, 25, "Debug");
      Debug->callback((Fl_Callback*)cb_Debug);
    } // Fl_Button* Debug
    uiw->end();
  } // Fl_Double_Window* uiw
}

int main(int argc, char **argv) {
  scene = new Scene;
  return Fl::run();
}

void GUI::show() {
  uiw->show();
}

void GUI::DBG_cb() {
  scene->DBG();
}

void GUI::NewButton_cb() {
  scene->NewButton();
}

void GUI::FilledMode_cb() {
  scene->EnableFilledMode();
}

void GUI::WireframeMode_cb() {
  scene->EnableWireframeMode();
}

void GUI::ToggleReflectionShader_cb() {
  scene->ToggleReflectionShader();
}
